# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type IdentityResponse {
  id: String!
}

type UserView {
  id: String!
  name: String!
  email: String!
}

type TokenResponse {
  access_token: String!
  expires_in: String!
  token_type: String!
}

type DataModelFieldView {
  name: String!
  label: String!
  type: DataModelFieldType!
  required: Boolean!
}

enum DataModelFieldType {
  Text
  Integer
  Float
  Boolean
}

type DataStorageView {
  id: String!
  createdBy: UserView!
  type: StorageType!
  status: StorageStatus!
  name: String!
}

enum StorageType {
  Postgres
}

enum StorageStatus {
  Pending
  Ready
}

type DataStoragePageableResponse {
  count: Int!
  data: [DataStorageView!]!
}

type DataModelView {
  id: String!
  createdBy: UserView!
  name: String!
  fields: [DataModelFieldView!]!
  dataStorage: DataStorageView!
}

type DataModelPageableResponse {
  count: Int!
  data: [DataModelView!]!
}

type InsertResponse {
  id: Int!
}

type QueryFindAndCountResponse {
  count: Int!
  data: [JSON!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type ApiConfigurationEndpointsView {
  httpMethod: HttpMethod!
  type: ApiType!
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
}

enum ApiType {
  GetOne
  GetAll
  Create
  Update
  Delete
}

type ApiConfigurationView {
  id: String!
  createdBy: UserView!
  dataModal: DataModelView!
  prefix: String!
  endpoints: [ApiConfigurationEndpointsView!]!
}

type ApiConfigurationPageableResponse {
  count: Int!
  data: [ApiConfigurationView!]!
}

type ProductView {
  createdBy: UserView!
  id: String!
  sku: String!
  title: String!
  description: String!
  quantity: Int!
}

type ProductPageableResponse {
  count: Int!
  data: [ProductView!]!
}

type Query {
  userAuthenticated: UserView!
  dataStoragesFind(request: DataStoragePageableRequest!): DataStoragePageableResponse!
  dataModelsFind(request: PageableRequest!): DataModelPageableResponse!
  dataModelFindById(id: String!): DataModelView!
  dataModelQueryFind(id: String!, query: JSON): QueryFindAndCountResponse!
  dataModelQueryFindOne(id: String!, query: JSON!): JSON!
  apiConfigurationsFind(request: PageableRequest!): ApiConfigurationPageableResponse!
  apiConfigurationFindById(id: String!): ApiConfigurationView!
  productsFind(request: PageableRequest!): ProductPageableResponse!
}

input DataStoragePageableRequest {
  take: Int!
  skip: Int!
  search: String
}

input PageableRequest {
  take: Int!
  skip: Int!
}

type Mutation {
  userRegister(dto: RegisterDTO!): IdentityResponse!
  userLogin(dto: LoginDTO!): TokenResponse!
  userUpdate(id: String!, dto: UpdateUserDTO!): Void
  dataStorageCreate(dto: DataStorageDto!): IdentityResponse
  dataStorageInitialize(id: String!): Void
  dataStorageSynchronize(id: String!): Void
  dataModelCreate(dto: DataModelDto!): IdentityResponse!
  dataModelUpdate(id: String!, dto: DataModelDto!): Void
  dataModelRemove(id: String!): Void
  dataModelQueryInsert(id: String!, data: JSON!): InsertResponse!
  dataModelQueryInsertMany(id: String!, data: [JSON!]!): [InsertResponse!]!
  dataModelQueryUpdate(id: String!, where: JSON!, data: JSON!): Void
  dataModelQueryDelete(id: String!, where: JSON!): Void
  apiConfigurationCreate(dto: ApiConfigurationDto!): IdentityResponse!
  apiConfigurationUpdate(id: String!, dto: ApiConfigurationDto!): Void!
  apiConfigurationRemove(id: String!): Void!
  personCreate(dto: PersonDto!): IdentityResponse
  personUpdate(id: String!, dto: PersonDto!): Void
  personRemove(id: String!): Void
  productCreate(dto: ProductDto!): IdentityResponse
  productUpdate(id: String!, dto: ProductDto!): Void
  productRemove(id: String!): Void
  inventoryInputCreate(dto: InventoryInputDto!): IdentityResponse
  inventoryInputUpdate(id: String!, dto: InventoryInputDto!): Void
  inventoryInputRemove(id: String!): Void
  inventoryOutputCreate(dto: InventoryOutputDto!): IdentityResponse
  inventoryOutputUpdate(id: String!, dto: InventoryOutputDto!): Void
  inventoryOutputRemove(id: String!): Void
  orderCreate(dto: OrderDto!): IdentityResponse
  orderUpdate(id: String!, dto: OrderDto!): Void
  orderRemove(id: String!): Void
}

input RegisterDTO {
  name: String!
  email: String!
  password: String!
}

input LoginDTO {
  email: String!
  password: String!
}

"""Represents NULL values"""
scalar Void

input UpdateUserDTO {
  name: String!
}

input DataStorageDto {
  type: StorageType!
  name: String!
}

input DataModelDto {
  name: String!
  fields: [DataModelFieldDto!]!
  dataStorageId: String!
}

input DataModelFieldDto {
  name: String!
  label: String
  type: DataModelFieldType!
  required: Boolean
}

input ApiConfigurationDto {
  dataModelId: String!
  prefix: String!
  endpoints: [ApiConfigurationEndpointDto!]!
}

input ApiConfigurationEndpointDto {
  httpMethod: HttpMethod!
  type: ApiType!
}

input PersonDto {
  isCustomer: Boolean
  isSupplier: Boolean
  title: String!
}

input ProductDto {
  sku: String!
  title: String!
  description: String
}

input InventoryInputDto {
  date: DateTime
  supplierId: String
  lines: [InventoryLineDto!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input InventoryLineDto {
  productId: String!
  quantity: Float!
}

input InventoryOutputDto {
  date: DateTime
  lines: [InventoryLineDto!]!
}

input OrderDto {
  date: DateTime!
  customerId: String!
  lines: [OrderLineDto!]!
}

input OrderLineDto {
  row: Int!
  productId: String!
  quantity: Float!
  unitPrice: Float!
}